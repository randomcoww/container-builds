name: nvidia-driver-container build
on:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  TARGET: nvidia-driver-container
  FEDORA_VERSION: 42
  GOLANG_VERSION: 1.25.3 # https://gitlab.com/container-toolkit-fcos/driver/-/blob/fedora-rebased-main/ci/fedora/.gitlab-ci-fcos.yml
  GITHUB_RELEASE: 580.95.05 # NVIDIA/open-gpu-kernel-modules

jobs:
  build:
    runs-on: builder-${{ github.event.repository.name }}
    container:
      image: docker.io/martizih/kaniko:v1.25.6-debug@sha256:76ca529af8d11976676fc83c6fcb93427c9584bac283fd4d71a43e803bf07635
    permissions:
      contents: read
    steps:
    - name: Set tag
      run: |
        set -e
        TARGETARCH=$(arch)
        echo BASE_URL=https://us.download.nvidia.com/XFree86/${TARGETARCH/x86_64/Linux-x86_64} | tee -a "$GITHUB_ENV"
        TARGETARCH=${TARGETARCH/x86_64/amd64} && TARGETARCH=${TARGETARCH/aarch64/arm64}

        echo TIMESTAMP=$(date -u +'%Y%m%d.%H%M') | tee -a "$GITHUB_ENV"
        echo TARGETARCH=$TARGETARCH | tee -a "$GITHUB_ENV"

    - name: Build and release container
      run: |
        cat > $DOCKER_CONFIG/config.json <<EOF
        {
          "auths": {
            "ghcr.io": {
              "auth": "$(echo -n ${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }} | base64 -w0)"
            }
          }
        }
        EOF
        echo -e "$INTERNAL_CA_CERT" > $DOCKER_CONFIG/internal.crt

        executor \
          --context-sub-path="fedora" \
          --dockerfile="./Dockerfile" \
          --context="git://gitlab.com/container-toolkit-fcos/driver.git#rebasing-main-fedora" \
          --destination="$INTERNAL_REGISTRY/${{ github.repository_owner }}/${{ env.TARGET }}:v$GITHUB_RELEASE.$TIMESTAMP-fedora$FEDORA_VERSION" \
          --registry-certificate=$INTERNAL_REGISTRY=$DOCKER_CONFIG/internal.crt \
          --build-arg TARGETARCH=$TARGETARCH \
          --build-arg GOLANG_VERSION=$GOLANG_VERSION \
          --build-arg FEDORA_VERSION=$FEDORA_VERSION \
          --build-arg DRIVER_VERSION=$GITHUB_RELEASE \
          --build-arg BASE_URL=$BASE_URL \
          --use-new-run \
          --skip-unused-stages \
          --snapshot-mode=redo \
          --cleanup \
          --image-download-retry=4 \
          --image-fs-extract-retry=4 \
          --push-retry=4
  cleanup:
    needs:
    - build
    env:
      TAGS_KEEP: 4
    runs-on: builder-${{ github.event.repository.name }}
    container:
      image: ghcr.io/regclient/regctl:alpine@sha256:53115c38927846d4f2ae111121cca7e95a033fd84132d69569e814ede1a696d3
    steps:
    - name: Remove old tags
      run: |
        set -e
        tags=$(mktemp)
        repo=$INTERNAL_REGISTRY/${{ github.repository_owner }}/${{ env.TARGET }}
        regctl registry set $INTERNAL_REGISTRY --cacert "$INTERNAL_CA_CERT"

        for tag in $(regctl tag ls $repo --exclude latest); do
          regctl image config $repo:$tag --format "{{ printf \"$tag|%d\\n\" .Created.Unix }}" >> $tags
        done
        for tag in $(sort -k2 -t "|" -n $tags | head -n -$TAGS_KEEP); do
          regctl tag delete --ignore-missing $repo:$(echo $tag | cut -d "|" -f 1)
        done